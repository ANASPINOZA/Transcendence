// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @unique @default(uuid())
  creatorOf Channel[] @relation("channelCreator")
  email String
  hash String
  // admineOf String[]
  friends User[] @relation("friendsList")
  friendOf User[] @relation("friendsList")
  blockedUsers User[] @relation("blocked")
  blockedByUsers User[] @relation("blocked")
  profilePic String
  username String @unique
  title String
  userDMs Conversation[]
  gameRecords GameRecord[]
  channels UserChannel[]
  channelBaned Channel[] @relation("channelBaned")

  memberConv Member[]

  mutedUser Muted? @relation(fields: [mutedId], references: [id])
  mutedId String? @unique

  userMessages Message[]
}

model GameRecord{
  id String @id @default(uuid())
  userRecord User @relation(fields: [recordId], references: [id])
  recordId String @unique
}

model Message{
  id String @id @default(uuid())

  sender User @relation(fields: [userId], references: [id])
  userId String

  message String

  createdAt DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Conversation{
  id String @id @default(uuid())

  type String
  members Member[]
  users User[]
  createdAt DateTime @default(now())
  messages Message[]

  channel Channel? @relation(fields: [channelId], references: [id])
  channelId String? @unique

}

model Member{
  id Int @id @default(autoincrement())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  user User @relation(fields: [userId], references: [id])
  userId String
}

// model Messages{
//   id	String @id() @default(uuid())

// }

model Channel{
  id String @id() @default(uuid())
  channelName String
  creator User @relation("channelCreator",fields: [creatorId], references: [id])
  creatorId String
  channelType String @default("public")
  hash String?
  members UserChannel[]
  conversation Conversation?
  // admins User[] @relation("channelAdmin")
  banedUsers User[] @relation("channelBaned")
  mutedUsers Muted[]
}



model UserChannel{

  isAdmin Boolean @default(false)

  users User @relation(fields: [userId], references: [id])
  userId String

  channels Channel @relation(fields: [channelId], references: [id])
  channelId String

  @@id([userId, channelId])
}

model Muted{
  id String @id() @default(uuid())
  timeToEnd DateTime
  mutedUser User?

  mutedChannel Channel @relation(fields: [mutedId], references: [id])
  mutedId String
}




























